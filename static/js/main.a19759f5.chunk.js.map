{"version":3,"sources":["Navbar/Navbar.js","Home.js","Help.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","console","log","react_default","a","createElement","className","react_router_dom","exact","to","id","Home","title","Customer","Host","Help","react_router","path","component","Signup","Login","App","render","src_Home","history","match","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a19759f5.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Navbar.css'\n\nconst Navbar = (props) => {\n  console.log(props);\n  return (\n    <div>\n      <nav className='black'>\n        <div className='nav-wrapper'>\n          <NavLink exact to='/' className='brand-logo'>\n            AriBnB\n          </NavLink>\n          <ul id='nav-mobile' className='right hide-on-med-and-down'>\n            <li>\n              <NavLink to='/host'>Become a host</NavLink>\n            </li>\n            <li>\n              <NavLink to='/help'>Help</NavLink>\n            </li>\n            <li>\n              <NavLink to='/signup'>Sign up</NavLink>\n            </li>\n            <li>\n              <NavLink to='/login'>Log in</NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react'\n\nconst Home = (props) => {\n  console.log(props);\n  // setTimeout(() => {\n  //   // props.history.push('/help') // move to the route we set\n  //   props.history.goBack(); // go back to prev route in the stack\n  // }, 1000);\n  // pop up a question window when click other route link\n  // props.history.block('are you sure wanna leave this page?')\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <h5>Please go to Help if you have any questions!\n      </h5>\n     \n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react';\nimport {Route, Link} from 'react-router-dom';\n\n\nconst Customer = () => <h1 className=\"green\">Customer help goes here!</h1>\nconst Host = () => <h1 className=\"red\">Host help goes here!</h1>\n\nconst Help = () => {\n  return (\n    <div>\n      <h1>Help Header</h1>\n      \n      <div>\n        <Link to=\"/help/customer\"><button className=\"btn waves-light waves-effect\">Customer</button></Link>\n        <Link to=\"/help/host\"><button className=\"btn-floating waves-effect waves-light red\">Host</button></Link>\n      </div>\n      <a>Image goes here</a>\n      <Route path=\"/help/customer\" component={Customer} />\n      <Route path=\"/help/host\" component={Host} />\n\n      <h1>Help Footer</h1>\n    </div>\n  )\n}\n\nexport default Help\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Navbar from './Navbar/Navbar';\nimport Home from './Home';\nimport Help from './Help';\n\n\nconst Host = () => <h1>Host</h1>\nconst Signup = () => <h1>Sign up</h1>\nconst Login = () => <h1>Log in</h1>\n\nfunction App() {\n  return (\n   <Router>\n     <Route path='/' component = {Navbar} />\n     <Route exact path='/' render= { (props) => {\n        return <Home title= 'Hello, I am rendered!!' history = {props.history} match={props.match}/>\n     }}\n     />\n     <Route path= '/host' component= {Host}/>\n     <Route path= '/help' component= {Help}/>\n     <Route path= '/signup' component= {Signup}/>\n     <Route path= '/login' component= {Login}/>\n   </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}